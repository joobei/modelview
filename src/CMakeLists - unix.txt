IF(WIN32)
SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "C:/dev/boost_1_49_0")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/dev/boost_1_49_0/stage/lib")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/dev/TUIO_CPP/Debug")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/dev/glfw-2.7.3/support/msvc100/Debug")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/dev/oscpacklib/Debug")
ENDIF()

########## Dependencies ############
SET(Boost_USE_STATIC_LIBS   ON)
SET(Boost_USE_MULTITHREADED ON)
FIND_PACKAGE( Boost 1.49 COMPONENTS system thread)
IF(Boost_FOUND)
      INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
ENDIF()

FIND_PACKAGE(OpenGL REQUIRED)
FIND_LIBRARY(glfw REQUIRED)

FIND_PACKAGE(Protobuf REQUIRED)
IF(PROTOBUF_FOUND)
    INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
    PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS data.proto)
ENDIF()
######## End Dependencies ###############

IF(WIN32)
	#include_directories(C:/dev/winddk/inc)
	
	link_directories(C:/dev/glfw-2.7.3/support/msvc100/Debug)
    link_directories(C:/dev/glew-1.7.0/lib)
	link_directories(C:/dev/boost_1_49_0/bin.v2/libs/system/build/msvc-10.0/debug/link-static/threading-multi)
	link_directories(C:/dev/boost_1_49_0/bin.v2/libs/thread/build/msvc-10.0/debug/link-static/threading-multi)
	link_directories(C:/dev/boost_1_49_0/bin.v2/libs/date_time/build/msvc-10.0/debug/link-static/threading-multi)
	link_directories(C:/dev/boost_1_49_0/bin.v2/libs/regex/build/msvc-10.0/debug/link-static/threading-multi)
    link_directories(C:/dev/oscpacklib/Debug)
	link_directories(C:/dev/winddk/lib/win7/i386)
	include_directories(C:/dev/glew-1.7.0/include)
	include_directories(C:/dev/glfw-2.7.3/include)
	include_directories(C:/dev/winddk/inc/api)

	if (MSVC_IDE)
    # hack to get around the "Debug" and "Release" directories cmake tries to add on Windows
    set_target_properties (${NAME} PROPERTIES PREFIX "../")
	endif()
ENDIF()

IF(APPLE)
#   SET (CMAKE_CXX_COMPILER "/opt/local/bin/gcc-mp-4.6")
    SET (CMAKE_CXX_COMPILER "/usr/bin/clang")
    ADD_DEFINITIONS(-stdlib=libc++) #Enable C++0x mode
    FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
    FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
    MARK_AS_ADVANCED (OPENGL_FRAMEWORK
                        COCOA_FRAMEWORK)
    SET(EXTRA_LIBS ${OPENGL_FRAMEWORK} ${COCOA_FRAMEWORK})
    include_directories(/opt/local/include)
    link_directories(/opt/local/lib)
    include_directories(/usr/local/include)
    link_directories(/usr/local/lib)
    include_directories(/usr/include)
    link_directories(/usr/lib)
ENDIF()

add_executable(${PROJECTNAME} main.cpp eventQueue.cpp asio.cpp asio.h eventQueue.h util.h util.cpp photonio.h photonio.cpp ${PROTO_SRCS} ${PROTO_HDRS} arcball.h arcball.cpp assets.h assets.cpp wiimote.cpp)
#add_executable(${PROJECTNAME} main.cpp eventQueue.cpp asio.cpp myTuio.h myTuio.cpp asio.h eventQueue.h util.h photonio.h photonio.cpp ${PROTO_SRCS} ${PROTO_HDRS} arcball.h arcball.cpp assets.h assets.cpp)

IF(APPLE)
target_link_libraries(${PROJECTNAME} stdc++ glfw GLEW boost_system boost_thread ${PROTOBUF_LIBRARIES} ${EXTRA_LIBS} -stdlib=libc++ tuio pthread ip osc posix)
ENDIF()

IF(UNIX AND NOT APPLE)
ADD_DEFINITIONS(-std=c++0x)
link_directories(/usr/lib)
target_link_libraries(${PROJECTNAME} stdc++ cwiid assimp Xxf86vm glfw Xrandr GLEW boost_system boost_thread ${PROTOBUF_LIBRARIES} X11 -stdlib=libc++ tuio pthread ip osc posix)
ENDIF()

IF(WIN32)
SET(CMAKE_BUILD_TYPE Debug)
target_link_libraries(${PROJECTNAME} glfw glew32d libboost_system-vc100-mt-gd-1_49 libboost_thread-vc100-mt-gd-1_49 ${PROTOBUF_LIBRARIES} oscnetlib ip osc tuio opengl32 winmm)

ADD_CUSTOM_COMMAND(TARGET ${PROJECTNAME}
          POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/lib/libTUIO.dll ${PROJECT_BINARY_DIR}
		  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/lib/glew32d.dll ${PROJECT_BINARY_DIR}

          #COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/assets
          #COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/assets ${PROJECT_BINARY_DIR}/src/assets
)

ENDIF()

ADD_CUSTOM_COMMAND(TARGET ${PROJECTNAME}
          POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/shaders
          COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/shaders ${PROJECT_BINARY_DIR}/src/shaders

          COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/assets
          COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/assets ${PROJECT_BINARY_DIR}/src/assets
)

source_group(shaders FILES shader.frag shader.vert)
